import random
import math
import numpy as np
from functools import reduce
import string
#from console import Console

class Tile:
    def __init__(self, arr, id, orientation):
        self.arr = arr
        self.id = id
        self.orientation = orientation
        self.up = None
        self.right = None
        self.down = None
        self.left = None
        self.tileSize = 10
        self.tileCount = 12

    def __repr__(self):
        return str(self.id)

    def map(self, x, y, mapSoFar=None):
        thisMap = mapSoFar
        if mapSoFar is None:
            thisMap = [[self.id]]
        print(f"Test {self.id}")
        for line in thisMap:
            print(line)
        print(x, y)
        if y < 0:
            thisMap = [[None for i in range(len(thisMap[0]))]] + thisMap
            #print(thisMap)
            y += 1
        if y >= len(thisMap):
            thisMap = thisMap + [[None for i in range(len(thisMap[0]))]]
        if x < 0:
            thisMap = [[None] + soFar for soFar in thisMap]
            x += 1
        if x >= len(thisMap[0]):
            thisMap = [soFar + [None] for soFar in thisMap]
        thisMap[y][x] = self
        for line in thisMap:
            print(line)
        print()
        if self.up:
            x, y, thisMap = self.up.map(x, y - 1, mapSoFar=thisMap)
            y += 1
        if self.down:
            x, y, thisMap = self.down.map(x, y + 1, mapSoFar=thisMap)
            y -= 1
        if self.right:
            x, y, thisMap = self.right.map(x + 1, y, mapSoFar=thisMap)
            x -= 1
        if self.left:
            x, y, thisMap = self.left.map(x - 1, y, mapSoFar=thisMap)
            x += 1
        return x, y, thisMap

    def findMatch(self, rawData):
        for nextId in rawData[0].keys():
            if nextId == self.id:
                continue
            for orient in range(16):
                otherMatrix = rawData[orient][nextId]
                if sum(1 for i in range(self.tileSize) if self.arr[0][i] == otherMatrix[self.tileSize - 1][i]) == self.tileSize:
                    #print(f"{nextId} is up")
                    self.up = Tile(otherMatrix, nextId, orient)
                if sum(1 for i in range(self.tileSize) if self.arr[self.tileSize - 1][i] == otherMatrix[0][i]) == self.tileSize:
                    #print(f"{nextId} is down")
                    self.down = Tile(otherMatrix, nextId, orient)
                if sum(1 for i in range(self.tileSize) if self.arr[i][0] == otherMatrix[i][self.tileSize - 1]) == self.tileSize:
                    #print(f"{nextId} is left")
                    self.left = Tile(otherMatrix, nextId, orient)
                if sum(1 for i in range(self.tileSize) if self.arr[i][self.tileSize - 1] == otherMatrix[i][0]) == self.tileSize:
                    #print(f"{nextId} is right")
                    self.right = Tile(otherMatrix, nextId, orient)
                #if sum([1 for x in range(10) if self.arr[x] == this[x]]) == 10:

if __name__ == "__main__":
    tileSize = 10
    tileCount = 12
    file = open("input.txt", "r")
    lines = file.readlines()
    #data = list(map(int, lines))
    data = list(map(lambda x: x.strip(), lines))
    tiles = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
    for i in range(len(data) // (tileSize + 2)):
        header = data[i * (tileSize + 2)]
        rows = data[i * (tileSize + 2) + 1:i * (tileSize + 2) + (tileSize + 2) - 1]
        number = int(header.split(" ")[1].split(":")[0])
        chars = np.zeros((tileSize, tileSize), 'U1')
        for j, string in enumerate(rows):
            for k, char in enumerate(string):
                chars[j][k] = char
        for i in range(16):
            rots = i % 4
            this = np.rot90(chars, rots, (0, 1))
            flips = i // 4
            if flips % 2:
                this = np.flipud(this)
            if flips // 2:
                this = np.fliplr(this)
            tiles[i][number] = this
        """
        print(tiles[0][number])
        print()
        print(tiles[1][number])
        print()
        print(tiles[2][number])
        print()
        print(tiles[3][number])
        """

    total = 0
    imageConnections = [[[1913, 3], [1759, 3]], [[1913, 1], [1889, 2]], [[1913, 0], [2311, 3]], [[1913, 2], [1777, 2]], [[2579, 3], [3631, 3]], [[2579, 7], [2437, 2]], [[2579, 4], [3733, 3]], [[2579, 6], [3499, 0]], [[1531, 4], [2729, 1]], [[1531, 6], [1543, 3]], [[1531, 5], [3571, 1]], [[1493, 3], [2879, 3]], [[1493, 4], [2341, 0]], [[1493, 0], [1021, 2]], [[1493, 7], [3323, 3]], [[3109, 2], [1579, 3]], [[3109, 7], [3457, 3]], [[3109, 5], [3889, 0]], [[3343, 2], [2729, 3]], [[3343, 3], [2693, 3]], [[2609, 6], [1031, 0]], [[2609, 1], [3881, 0]], [[2609, 4], [1283, 0]], [[2609, 3], [2207, 1]], [[1823, 5], [2753, 2]], [[1823, 2], [2179, 2]], [[1823, 6], [1049, 3]], [[1823, 1], [3613, 2]], [[3391, 3], [3329, 0]], [[3391, 4], [1933, 2]], [[3391, 7], [1879, 0]], [[3391, 6], [3917, 2]], [[2753, 4], [1823, 3]], [[2753, 6], [3163, 1]], [[2753, 1], [1931, 0]], [[2753, 3], [2003, 2]], [[3989, 1], [2837, 0]], [[3989, 6], [2971, 1]], [[3989, 3], [1321, 3]], [[3989, 4], [2521, 2]], [[1877, 4], [1759, 2]], [[1877, 6], [2713, 1]], [[1877, 5], [2969, 3]], [[1877, 7], [1777, 3]], [[2729, 7], [1531, 2]], [[2729, 3], [3343, 2]], [[2729, 6], [3923, 0]], [[1031, 6], [2609, 0]], [[1031, 1], [3943, 3]], [[1031, 4], [2441, 0]], [[1031, 3], [1597, 1]], [[3803, 1], [2837, 1]], [[3803, 4], [2879, 0]], [[3803, 6], [2521, 3]], [[3803, 5], [1021, 1]], [[3541, 2], [2347, 0]], [[3541, 5], [3907, 2]], [[3541, 1], [1129, 3]], [[3541, 0], [3917, 0]], [[3821, 5], [2113, 2]], [[3821, 6], [1123, 0]], [[3853, 3], [2203, 3]], [[3853, 1], [2879, 2]], [[3853, 0], [1489, 1]], [[3853, 4], [2341, 3]], [[1249, 3], [2347, 1]], [[1249, 4], [3907, 3]], [[1249, 1], [2687, 2]], [[3673, 3], [3389, 0]], [[3673, 1], [3001, 1]], [[3673, 6], [2131, 1]], [[3163, 7], [2753, 0]], [[3163, 6], [3389, 2]], [[3163, 2], [3677, 0]], [[1759, 3], [1913, 3]], [[1759, 4], [1877, 2]], [[1759, 7], [2081, 3]], [[1759, 6], [3701, 2]], [[1831, 5], [1103, 0]], [[1831, 6], [1489, 3]], [[1831, 2], [1607, 1]], [[1831, 7], [2647, 2]], [[2179, 2], [1823, 2]], [[2179, 1], [2339, 3]], [[2179, 5], [2003, 1]], [[2713, 7], [1877, 0]], [[2713, 0], [1789, 0]], [[2713, 3], [1049, 1]], [[2713, 4], [2131, 3]], [[1889, 2], [1913, 1]], [[1889, 3], [1103, 3]], [[1889, 1], [2203, 0]], [[1889, 0], [1489, 0]], [[1999, 2], [2141, 3]], [[1999, 6], [3217, 0]], [[1999, 7], [1811, 0]], [[2039, 6], [2153, 2]], [[2039, 3], [3457, 1]], [[2039, 7], [2113, 0]], [[2969, 5], [1877, 3]], [[2969, 6], [2081, 2]], [[2969, 1], [3001, 0]], [[2969, 4], [2131, 0]], [[2153, 4], [2039, 0]], [[2153, 1], [1373, 3]], [[2153, 3], [3643, 2]], [[2153, 0], [1483, 1]], [[2837, 0], [3989, 1]], [[2837, 1], [3803, 1]], [[2837, 3], [2927, 0]], [[2837, 2], [1663, 3]], [[1619, 1], [1667, 3]], [[1619, 0], [3217, 2]], [[1619, 2], [3709, 3]], [[3943, 3], [1031, 1]], [[3943, 1], [2333, 1]], [[3943, 0], [1867, 3]], [[3943, 4], [2207, 2]], [[3389, 0], [3673, 3]], [[3389, 4], [3163, 0]], [[3389, 1], [1931, 3]], [[3631, 3], [2579, 3]], [[3631, 6], [1367, 2]], [[3631, 4], [2473, 3]], [[3631, 7], [1483, 3]], [[2081, 5], [1759, 1]], [[2081, 4], [2969, 0]], [[2081, 6], [2161, 0]], [[2081, 1], [3137, 3]], [[1579, 3], [3109, 2]], [[1579, 0], [3593, 2]], [[1579, 1], [2719, 3]], [[1579, 2], [3643, 0]], [[3019, 4], [1129, 2]], [[3019, 5], [2213, 3]], [[3019, 6], [1879, 1]], [[3019, 7], [3917, 1]], [[2089, 2], [3733, 1]], [[2089, 5], [3373, 2]], [[2089, 7], [2687, 0]], [[2297, 5], [1789, 3]], [[2297, 4], [1049, 2]], [[2297, 6], [3793, 2]], [[2297, 1], [3613, 1]], [[1373, 3], [2153, 1]], [[1373, 0], [2113, 1]], [[1373, 4], [3299, 1]], [[1373, 1], [1123, 1]], [[1259, 2], [2371, 2]], [[1259, 1], [3767, 1]], [[1259, 3], [1607, 0]], [[1259, 6], [2647, 1]], [[2411, 7], [2437, 0]], [[2411, 6], [3907, 1]], [[2411, 4], [3329, 1]], [[2411, 3], [3917, 3]], [[3359, 4], [2657, 3]], [[3359, 5], [2141, 1]], [[3359, 7], [3889, 2]], [[2437, 4], [2579, 1]], [[2437, 6], [2411, 1]], [[2437, 1], [2833, 2]], [[2437, 3], [3323, 1]], [[1367, 4], [3631, 0]], [[1367, 1], [2273, 1]], [[1367, 0], [1231, 0]], [[1367, 3], [3499, 1]], [[3533, 2], [1321, 2]], [[3533, 1], [3593, 3]], [[3533, 0], [2719, 2]], [[3533, 5], [2521, 1]], [[1451, 5], [2711, 2]], [[1451, 6], [2693, 1]], [[1451, 4], [3847, 1]], [[3457, 5], [3109, 1]], [[3457, 1], [2039, 3]], [[3457, 4], [3643, 1]], [[2657, 5], [3359, 2]], [[2657, 7], [1321, 1]], [[2657, 6], [3593, 0]], [[2657, 4], [1549, 0]], [[2347, 0], [3541, 2]], [[2347, 1], [1249, 3]], [[2347, 3], [3847, 3]], [[3923, 6], [2729, 0]], [[3923, 4], [2711, 1]], [[3923, 7], [2693, 2]], [[3923, 5], [3571, 2]], [[2593, 1], [1283, 3]], [[2593, 4], [2207, 0]], [[2593, 5], [1871, 2]], [[1103, 6], [1831, 3]], [[1103, 3], [1889, 3]], [[1103, 1], [2903, 0]], [[1103, 2], [1777, 1]], [[2671, 2], [3491, 1]], [[2671, 5], [1543, 0]], [[2671, 7], [2503, 3]], [[2671, 6], [3571, 0]], [[3907, 4], [3541, 3]], [[3907, 5], [1249, 2]], [[3907, 7], [2411, 0]], [[3907, 0], [2833, 1]], [[1327, 4], [1163, 2]], [[1327, 7], [2339, 1]], [[1327, 3], [1481, 3]], [[1163, 4], [1327, 2]], [[1163, 6], [3793, 1]], [[1163, 3], [3613, 0]], [[1163, 7], [1453, 2]], [[2683, 5], [1973, 2]], [[2683, 1], [1481, 1]], [[2683, 4], [1223, 1]], [[3881, 0], [2609, 1]], [[3881, 7], [1973, 3]], [[3881, 5], [1597, 2]], [[3881, 4], [1223, 0]], [[2711, 4], [1451, 3]], [[2711, 7], [3923, 2]], [[2711, 3], [1129, 1]], [[2711, 0], [2213, 0]], [[3491, 1], [2671, 2]], [[3491, 5], [2161, 2]], [[3491, 0], [1381, 0]], [[3491, 2], [1319, 3]], [[2339, 3], [2179, 1]], [[2339, 7], [1327, 1]], [[2339, 0], [3613, 3]], [[1543, 5], [1531, 0]], [[1543, 6], [2671, 3]], [[1543, 7], [1319, 2]], [[2371, 2], [1259, 2]], [[2371, 3], [3259, 2]], [[2371, 1], [1597, 3]], [[2371, 0], [1223, 3]], [[2971, 7], [3989, 0]], [[2971, 3], [2441, 2]], [[2971, 2], [3413, 2]], [[2971, 6], [2927, 1]], [[2203, 3], [3853, 3]], [[2203, 0], [1889, 1]], [[2203, 1], [2311, 0]], [[2203, 2], [1933, 0]], [[2113, 4], [3821, 3]], [[2113, 6], [2039, 1]], [[2113, 1], [1373, 0]], [[1321, 3], [3989, 3]], [[1321, 2], [3533, 2]], [[1321, 7], [2657, 1]], [[1321, 6], [3413, 1]], [[1667, 3], [1619, 1]], [[1667, 2], [2333, 2]], [[1667, 7], [2207, 3]], [[1667, 6], [1871, 3]], [[3001, 1], [3673, 1]], [[3001, 0], [2969, 1]], [[3001, 5], [3137, 0]], [[1789, 0], [2713, 0]], [[1789, 5], [2297, 3]], [[1789, 2], [2903, 1]], [[1789, 1], [1777, 0]], [[3677, 0], [3163, 2]], [[3677, 5], [2003, 3]], [[2693, 3], [3343, 3]], [[2693, 7], [1451, 0]], [[2693, 4], [3923, 1]], [[2141, 3], [1999, 2]], [[2141, 7], [3359, 3]], [[2141, 4], [1549, 3]], [[3847, 7], [1451, 2]], [[3847, 3], [2347, 3]], [[3847, 0], [1129, 0]], [[2333, 1], [3943, 1]], [[2333, 2], [1667, 2]], [[2333, 3], [3217, 3]], [[2333, 0], [1811, 1]], [[2129, 3], [3299, 2]], [[2129, 4], [1123, 2]], [[2129, 0], [3373, 0]], [[1283, 6], [2609, 2]], [[1283, 3], [2593, 1]], [[1283, 1], [1973, 0]], [[2851, 3], [2161, 3]], [[2851, 6], [3137, 2]], [[2851, 4], [1319, 0]], [[2311, 3], [1913, 0]], [[2311, 0], [2203, 1]], [[2311, 7], [2377, 0]], [[2311, 4], [3701, 3]], [[3217, 6], [1999, 0]], [[3217, 2], [1619, 0]], [[3217, 3], [2333, 3]], [[2833, 2], [2437, 1]], [[2833, 1], [3907, 0]], [[2833, 3], [3733, 0]], [[2833, 6], [2687, 3]], [[3593, 2], [1579, 0]], [[3593, 3], [3533, 1]], [[3593, 6], [2657, 0]], [[3593, 7], [3889, 1]], [[3299, 7], [1373, 2]], [[3299, 2], [2129, 3]], [[3299, 5], [2473, 0]], [[3299, 6], [1483, 2]], [[2719, 3], [1579, 1]], [[2719, 2], [3533, 0]], [[2719, 0], [2273, 0]], [[2719, 1], [1231, 1]], [[2161, 6], [2081, 0]], [[2161, 4], [3491, 3]], [[2161, 3], [2851, 3]], [[2161, 7], [3701, 1]], [[3643, 2], [2153, 3]], [[3643, 0], [1579, 2]], [[3643, 7], [3457, 2]], [[3643, 3], [2273, 3]], [[3767, 1], [1259, 1]], [[3767, 5], [2441, 3]], [[3767, 2], [1597, 0]], [[3767, 0], [2927, 2]], [[2377, 6], [2311, 1]], [[2377, 3], [1381, 2]], [[2377, 7], [1933, 3]], [[2377, 4], [1879, 3]], [[2441, 6], [1031, 2]], [[2441, 2], [2971, 3]], [[2441, 5], [3767, 3]], [[2441, 7], [1867, 2]], [[2273, 1], [1367, 1]], [[2273, 0], [2719, 0]], [[2273, 3], [3643, 3]], [[2273, 2], [1483, 0]], [[1231, 0], [1367, 0]], [[1231, 1], [2719, 1]], [[1231, 4], [2521, 0]], [[1231, 5], [1021, 0]], [[2879, 3], [1493, 3]], [[2879, 6], [3803, 2]], [[2879, 2], [3853, 1]], [[2879, 7], [1663, 2]], [[2473, 5], [3631, 2]], [[2473, 6], [3299, 3]], [[2473, 2], [3733, 2]], [[2473, 7], [3373, 3]], [[3329, 0], [3391, 3]], [[3329, 7], [2411, 2]], [[3329, 3], [2341, 1]], [[3329, 2], [3323, 2]], [[1489, 1], [3853, 0]], [[1489, 5], [1831, 0]], [[1489, 0], [1889, 0]], [[1489, 4], [1663, 1]], [[3259, 2], [2371, 3]], [[3259, 6], [3793, 0]], [[3259, 1], [1607, 3]], [[3259, 5], [1453, 3]], [[1123, 6], [3821, 0]], [[1123, 1], [1373, 1]], [[1123, 4], [2129, 2]], [[1381, 0], [3491, 0]], [[1381, 2], [2377, 3]], [[1381, 7], [2503, 2]], [[1381, 3], [3701, 0]], [[2903, 0], [1103, 1]], [[2903, 1], [1789, 2]], [[2903, 2], [3793, 3]], [[2903, 5], [1607, 2]], [[1049, 5], [1823, 0]], [[1049, 1], [2713, 3]], [[1049, 4], [2297, 2]], [[1049, 0], [1931, 1]], [[3137, 3], [2081, 1]], [[3137, 6], [3001, 3]], [[3137, 4], [2851, 0]], [[2131, 7], [3673, 0]], [[2131, 5], [2713, 2]], [[2131, 6], [2969, 2]], [[2131, 4], [1931, 2]], [[3733, 5], [2579, 2]], [[3733, 1], [2089, 2]], [[3733, 0], [2833, 3]], [[3733, 2], [2473, 2]], [[1973, 4], [2683, 3]], [[1973, 5], [3881, 1]], [[1973, 0], [1283, 1]], [[3889, 6], [3109, 3]], [[3889, 4], [3359, 1]], [[3889, 7], [3593, 1]], [[1129, 3], [3541, 1]], [[1129, 4], [3019, 2]], [[1129, 1], [2711, 3]], [[1129, 0], [3847, 0]], [[1549, 6], [2657, 2]], [[1549, 5], [2141, 2]], [[1549, 2], [1811, 3]], [[1549, 7], [3413, 0]], [[2213, 5], [3019, 3]], [[2213, 0], [2711, 0]], [[2213, 2], [2503, 0]], [[2213, 1], [3571, 3]], [[1597, 1], [1031, 3]], [[1597, 4], [3881, 3]], [[1597, 3], [2371, 1]], [[1597, 0], [3767, 2]], [[1777, 2], [1913, 2]], [[1777, 5], [1877, 1]], [[1777, 1], [1103, 2]], [[1777, 0], [1789, 1]], [[2503, 5], [2671, 1]], [[2503, 4], [1381, 1]], [[2503, 0], [2213, 2]], [[2503, 1], [1879, 2]], [[3499, 6], [2579, 0]], [[3499, 1], [1367, 3]], [[3499, 4], [1021, 3]], [[3499, 3], [3323, 0]], [[1811, 6], [1999, 1]], [[1811, 1], [2333, 0]], [[1811, 3], [1549, 2]], [[1811, 2], [1867, 0]], [[3793, 4], [2297, 0]], [[3793, 7], [1163, 0]], [[3793, 6], [3259, 0]], [[3793, 3], [2903, 2]], [[2341, 6], [1493, 2]], [[2341, 5], [3853, 2]], [[2341, 1], [3329, 3]], [[2341, 4], [1933, 1]], [[3613, 2], [1823, 1]], [[3613, 1], [2297, 1]], [[3613, 0], [1163, 3]], [[3613, 3], [2339, 0]], [[3701, 4], [1759, 0]], [[3701, 5], [2311, 2]], [[3701, 7], [2161, 1]], [[3701, 0], [1381, 3]], [[1483, 1], [2153, 0]], [[1483, 5], [3631, 1]], [[1483, 4], [3299, 0]], [[1483, 0], [2273, 2]], [[3571, 7], [1531, 3]], [[3571, 4], [3923, 3]], [[3571, 6], [2671, 0]], [[3571, 3], [2213, 1]], [[2521, 4], [3989, 2]], [[2521, 5], [3803, 0]], [[2521, 7], [3533, 3]], [[2521, 6], [1231, 2]], [[3413, 2], [2971, 2]], [[3413, 7], [1321, 0]], [[3413, 6], [1549, 1]], [[3413, 5], [1867, 1]], [[1933, 4], [3391, 2]], [[1933, 0], [2203, 2]], [[1933, 5], [2377, 1]], [[1933, 7], [2341, 2]], [[1021, 2], [1493, 0]], [[1021, 7], [3803, 3]], [[1021, 6], [1231, 3]], [[1021, 5], [3499, 2]], [[3323, 5], [1493, 1]], [[3323, 1], [2437, 3]], [[3323, 2], [3329, 2]], [[3323, 0], [3499, 3]], [[1607, 1], [1831, 2]], [[1607, 0], [1259, 3]], [[1607, 3], [3259, 1]], [[1607, 4], [2903, 3]], [[1481, 3], [1327, 3]], [[1481, 1], [2683, 1]], [[1481, 2], [1453, 1]], [[1879, 6], [3391, 1]], [[1879, 7], [3019, 0]], [[1879, 5], [2377, 2]], [[1879, 2], [2503, 1]], [[2927, 0], [2837, 3]], [[2927, 7], [2971, 0]], [[2927, 2], [3767, 0]], [[2927, 5], [2647, 0]], [[1867, 3], [3943, 0]], [[1867, 4], [2441, 1]], [[1867, 0], [1811, 2]], [[1867, 7], [3413, 3]], [[2647, 4], [1831, 1]], [[2647, 7], [1259, 0]], [[2647, 6], [2927, 3]], [[2647, 5], [1663, 0]], [[2207, 1], [2609, 3]], [[2207, 4], [3943, 2]], [[2207, 6], [2593, 2]], [[2207, 5], [1667, 1]], [[1223, 7], [2683, 2]], [[1223, 6], [3881, 2]], [[1223, 3], [2371, 0]], [[1223, 4], [1453, 0]], [[1931, 0], [2753, 1]], [[1931, 3], [3389, 1]], [[1931, 1], [1049, 0]], [[1931, 4], [2131, 2]], [[3917, 4], [3391, 0]], [[3917, 0], [3541, 0]], [[3917, 7], [3019, 1]], [[3917, 3], [2411, 3]], [[1663, 3], [2837, 2]], [[1663, 4], [2879, 1]], [[1663, 7], [1489, 2]], [[1663, 6], [2647, 3]], [[3373, 4], [2089, 3]], [[3373, 0], [2129, 0]], [[3373, 5], [2473, 1]], [[1319, 3], [3491, 2]], [[1319, 4], [1543, 1]], [[1319, 6], [2851, 2]], [[2687, 2], [1249, 1]], [[2687, 6], [2089, 1]], [[2687, 5], [2833, 0]], [[2003, 2], [2753, 3]], [[2003, 7], [2179, 3]], [[2003, 5], [3677, 3]], [[1453, 4], [1163, 1]], [[1453, 5], [3259, 3]], [[1453, 1], [1481, 2]], [[1453, 6], [1223, 2]], [[1871, 4], [2593, 3]], [[1871, 5], [1667, 0]], [[1871, 6], [3709, 2]], [[3709, 3], [1619, 2]], [[3709, 4], [1871, 0]]]
    #imageConnections = [[[2311, 5], [1951, 1]], [[2311, 6], [1427, 2]], [[1951, 7], [2311, 3]], [[1951, 6], [2729, 2]], [[1171, 7], [1489, 1]], [[1171, 6], [2473, 3]], [[1427, 4], [2311, 0]], [[1427, 6], [1489, 2]], [[1427, 7], [2473, 2]], [[1427, 5], [2729, 1]], [[1489, 7], [1171, 1]], [[1489, 4], [1427, 0]], [[1489, 5], [2971, 1]], [[2473, 5], [1171, 0]], [[2473, 4], [1427, 1]], [[2971, 7], [1489, 3]], [[2971, 4], [2729, 0]], [[2729, 4], [1951, 0]], [[2729, 7], [1427, 3]], [[2729, 6], [2971, 2]]]
    print(len(imageConnections))
    imageOrientations = {}
    errCount = 0
    orig = 3343
    origOr = 2
    #orig = 1951
    #origOr = 1
    for connection in imageConnections:
        for i in range(2):
            if connection[i][0] == orig:
                print(connection[i])
            if connection[i][0] in imageOrientations.keys():
                if imageOrientations[connection[i][0]] != connection[i][1]:
                    #print(f"ERROR: Tile {connection[i][0]}; {imageOrientations[connection[i][0]]} vs {connection[i][1]}")
                    errCount += 1
            else:
                imageOrientations[connection[i][0]] = connection[i][1]
    print(imageOrientations)
    #print(errCount)
    #print(len(imageConnections))
    #print(2 * 12 * 11 * 2)

    originTile = Tile(tiles[origOr][orig], orig, origOr)
    originTile.findMatch(tiles)
    print(originTile.up, originTile.left, originTile.down, originTile.right)

    #originTile.up.findMatch(tiles)
    #x, y, tileMap = originTile.map(0, 0)
    #for line in tileMap:
        #print(line)
    #exit()

    nextTile = originTile
    for i in range(tileCount - 1):
        #print(i)
        nextTile = nextTile.right
        #nextTile = nextTile.left
        nextTile.findMatch(tiles)
        subTile = nextTile
        for j in range(tileCount - 1):
            #print(i, j)
            subTile = subTile.up
            subTile.findMatch(tiles)
    x, y, tileMap = originTile.map(0, 0)
    print()
    for row in tileMap:
        print(row)
    print()
    print(len(tileMap))
    print(len(tileMap[0]))
    totalMap = np.zeros((tileCount * (tileSize - 2), tileCount * (tileSize - 2)), 'U1')
    for i, line in enumerate(tileMap):
        for j, specMap in enumerate(line):
            for y in range(tileSize - 2):
                for x in range(tileSize - 2):
                    totalMap[i * (tileSize - 2) + y][j * (tileSize - 2) + x] = specMap.arr[y + 1][x + 1]
    for line in totalMap:
        print(''.join(line))
    xLen = 20
    yLen = 3
    monsterTiles = [
        [0, 18],
        [1, 0],
        [1, 5],
        [1, 6],
        [1, 11],
        [1, 12],
        [1, 17],
        [1, 18],
        [1, 19],
        [2, 1],
        [2, 4],
        [2, 7],
        [2, 10],
        [2, 13],
        [2, 16]
    ]
    for i in range(4):
        thisRot = np.rot90(totalMap, i, (0, 1))
        for j in range(4):
            thisMap = thisRot
            if j % 2:
                thisMap = np.flipud(thisMap)
            if j // 2:
                thisMap = np.fliplr(thisMap)
            monsterCount = 0
            monsterLocs = []
            for y in range((tileSize - 2) * tileCount - yLen):
                for x in range((tileSize - 2) * tileCount - xLen):
                    if sum(1 for delta in monsterTiles if thisMap[y + delta[0]][x + delta[1]] == '#') == 15:
                        monsterCount += 1
                        monsterLocs.append([y, x])
            #print(monsterCount)
            if monsterCount > 0:
                for monster in monsterLocs:
                    for delta in monsterTiles:
                        thisMap[monster[0] + delta[0]][monster[1] + delta[1]] = '.'
                pureCount = 0
                for y in range((tileSize - 2) * tileCount):
                    for x in range((tileSize - 2) * tileCount):
                        if thisMap[y][x] == '#':
                            pureCount += 1
                print(pureCount)
                break
    #print(originTile.up, originTile.down, originTile.left, originTile.right)
    exit()


    imageConnections = []
    total = 0
    for id, tile in tiles[0].items():
        possibleRots = [tiles[i][id] for i in range(16)]
        countFound = 0
        tilesNextTo = [id]
        for id2 in tiles[0].keys():
            if id2 in tilesNextTo:
                continue
            found = False
            for i in range(0, 16):
                tile2 = tiles[i][id2]
                for j in range(16):
                    #print(tile2[0])
                    #print(possibleRots[j][0])
                    orig = possibleRots[j][0]
                    this = tile2[0]
                    #print(sum([1 for x in range(10) if orig[x] == this[x]]))
                    #print()
                    if sum([1 for x in range(tileSize) if orig[x] == this[x]]) == tileSize:
                        countFound += 1
                        tilesNextTo.append(id2)
                        imageConnections.append([[id, j], [id2, i]])
                        #print(orig)
                        #print(this)
                        #print(id, id2)
                        #print()
                        found = True
                        break
                if found:
                    break
            if countFound > 2:
                continue
        if countFound == 2:
            total += 1
            print(id)
    print(total)
    print(imageConnections)
